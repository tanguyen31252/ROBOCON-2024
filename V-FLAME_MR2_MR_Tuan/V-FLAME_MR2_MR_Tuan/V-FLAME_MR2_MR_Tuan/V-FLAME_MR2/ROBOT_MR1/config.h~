#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define 	ADC1_DR_ADDRESS    ((uint32_t)0x4001204C)
////////////////////////NHUNG CHAN MAC DINH/////////////////////////////////////////
//-------------------------------- DEFINE MOTOR ---------------------------------------

//==============TIMER-CH==============
#define	mor_4h					TIM4->CCR1
#define mor_4h_next			GPIO_WriteBit(GPIOA,GPIO_Pin_8,0)
#define mor_4h_back 		GPIO_WriteBit(GPIOA,GPIO_Pin_8,1)

#define	mor_8h				TIM4->CCR2
#define mor_8h_back			GPIO_WriteBit(GPIOA,GPIO_Pin_11,1)
#define mor_8h_next 		GPIO_WriteBit(GPIOA,GPIO_Pin_11,0)

#define	mor_0h			TIM4->CCR3
#define mor_0h_next			GPIO_WriteBit(GPIOA,GPIO_Pin_12,1)
#define mor_0h_back		GPIO_WriteBit(GPIOA,GPIO_Pin_12,0)

#define	mor_keo_thang					TIM4->CCR4
#define mor_keo_thang_next			GPIO_WriteBit(GPIOC,GPIO_Pin_10,0)
#define mor_keo_thang_black 		GPIO_WriteBit(GPIOC,GPIO_Pin_10,1)

//#define	DC5					TIM8->CCR1
//#define DC5_toi			GPIO_WriteBit(GPIOC,GPIO_Pin_11,0)
//#define DC5_lui 		GPIO_WriteBit(GPIOC,GPIO_Pin_11,1)

//#define	DC6					TIM8->CCR2
//#define DC6_toi			GPIO_WriteBit(GPIOD,GPIO_Pin_11,1)
//#define DC6_lui 		GPIO_WriteBit(GPIOD,GPIO_Pin_11,0)

//#define	DC7					TIM8->CCR3
//#define DC7_toi			GPIO_WriteBit(GPIOD,GPIO_Pin_0,1)
//#define DC7_lui 		GPIO_WriteBit(GPIOD,GPIO_Pin_0,0)

//#define	DC8					TIM8->CCR4
//#define DC8_toi			GPIO_WriteBit(GPIOD,GPIO_Pin_1,1)
//#define DC8_lui 		GPIO_WriteBit(GPIOD,GPIO_Pin_1,0)


//=============================ADC DMI======================================
#define ADC_0							  _ADC1_Value[0]
#define ADC_1								_ADC1_Value[1]
#define ADC_2								_ADC1_Value[2]
#define ADC_3								_ADC1_Value[3]
#define ADC_4								_ADC1_Value[4]

//==============================LINE========================================
#define 	LINE_7   					  	GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_6)
#define 	LINE_6          			GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_13)
#define 	LINE_5            		GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_14)	
#define 	LINE_4   					  	GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_15)
#define 	LINE_3          			GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_6)
#define 	LINE_2            		GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_7)	
#define 	LINE_1   					  	GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_4)
#define 	LINE_0           			GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_5)

//xxxxxxxxxxxxxxxxxxxxxxxxxx OUTPUT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

#define  SAN_XANH		GPIO_WriteBit(GPIOA,GPIO_Pin_5,1);
#define  SAN_DO			GPIO_WriteBit(GPIOA,GPIO_Pin_5,0);
#define  XL_Nang_off	GPIO_WriteBit(GPIOB,GPIO_Pin_6,0);
#define  XL_Nang_on		GPIO_WriteBit(GPIOB,GPIO_Pin_6,1);
#define  XL_Chan_off 	GPIO_WriteBit(GPIOB,GPIO_Pin_7,0);
#define  XL_Chan_on 	GPIO_WriteBit(GPIOB,GPIO_Pin_7,1);
//xxxxxxxxxxxxxxxxxxxxxxxxxxx INPUT xxxxxxxxxxxxxxxxxxxxxxxxxx
#define  CBT_NAG_TREN		GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_11);
#define  CBT_NAG_DUOI		GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_14);
#define  CBT_CHAN_DUOI		GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_15);
#define  CBT_CHAN_TREN		GPIO_ReadInputDataBit(GPIOD,GPIO_Pin_10);
#define  CBQ_KEO			GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_11);
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX OUTPUT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#define  OUT_2 			GPIO_WriteBit(GPIOD,GPIO_Pin_4,0);
#define  OUT_3			GPIO_WriteBit(GPIOD,GPIO_Pin_5,0);
#define  OUT_4 			GPIO_WriteBit(GPIOD,GPIO_Pin_6,0);	//GPIO_ToggleBits(GPIOD,GPIO_Pin_5);
#define  OUT_5			GPIO_WriteBit(GPIOD,GPIO_Pin_7,0);
#define  OUT_8			GPIO_WriteBit(GPIOB,GPIO_Pin_8,0);
#define  OUT_9 			GPIO_WriteBit(GPIOB,GPIO_Pin_9,0);					
#define  OUT_10			GPIO_WriteBit(GPIOE,GPIO_Pin_0,0);
#define  OUT_11			GPIO_WriteBit(GPIOE,GPIO_Pin_1,0);
#define  OUT_12			GPIO_WriteBit(GPIOE,GPIO_Pin_2,0);
#define  OUT_13			GPIO_WriteBit(GPIOE,GPIO_Pin_3,0);
#define  OUT_14			GPIO_WriteBit(GPIOE,GPIO_Pin_4,0);
#define  OUT_15			GPIO_WriteBit(GPIOE,GPIO_Pin_5,0);

//===========================INPUT================================
#define  IN_1				GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)
#define  IN_2				GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_1)
#define  IN_3				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_7);
#define  IN_4				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_8);
#define  IN_5				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_9);
#define  IN_6				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_10);
#define  IN_7				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_12);
#define  IN_8				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_13);
#define  IN_9				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_14);
#define  IN_10				GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_15);
#define  IN_11				GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_10);
//=============================ENCODER======================================
#define ENCODER_1	(num_over_t2<<16)|TIM_GetCounter(TIM2)
#define ENCODER_2	(num_over_t3<<16)|TIM_GetCounter(TIM3)
//#define ENCODER_3	(num_over_t1<<16)|TIM_GetCounter(TIM1)
#define ENCODER_4	(num_over_t9<<16)|TIM_GetCounter(TIM9)

///////////////////////KET THUC KHAI BAO NHUNG CHAN MAC DINH/////////////////////////////////////////


vs32 	sieu_am,num_over_t1,num_over_t2, num_over_t3,num_over_t5, num_over_t9,CCR2_Val,ENCODER_DOC,HMI_LOOP;
vs16 	IMU;
vu8 	data_tx_gyro,en_gyro;
vu8 	RxBuffer_compass[2],RX_USART1[15];//TAY GAME, LA BAN
uint8_t MANG_GAME[10];									
vu16 _ADC1_Value[5];


//------------------------------------ DELAY MICROSECOND--------------------------------------------
void delay_us(vu32 num)
{
	__IO uint32_t index = 0;

	/* default system clock is 180MHz */
	for(index = (18 * num); index != 0; index--);
}
//------------------------------------ DELAY MILISECOND--------------------------------------------
void delay_ms(vu32 num)
{
	__IO uint32_t index = 0;

	/* default system clock is 180MHz */
	for(index = (18000 * num); index != 0; index--);
}


//---------------------------- config out mode -----------------------------
void Config_out_mode(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure;
	
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOE|RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_8|GPIO_Pin_11|GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;	
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11|GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
	GPIO_Init(GPIOE, &GPIO_InitStructure);
	
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_11|GPIO_Pin_12; 
  GPIO_InitStructure.GPIO_Mode =GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType =GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOA, &GPIO_InitStructure); 
	 
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10|GPIO_Pin_11; 
  GPIO_InitStructure.GPIO_Mode =GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType =GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure); 

}

//---------------------------- config out mode -----------------------------
void Config_in_mode(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure;
	
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG, ENABLE);
	/////////////////////////////////////line
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15 | GPIO_Pin_4 | GPIO_Pin_5 ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
		
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_11;
  GPIO_Init(GPIOE, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11|GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_10|GPIO_Pin_1|GPIO_Pin_0|GPIO_Pin_9;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_10|GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
	
}

//============================ config timer6 1ms ===================================
void Config_int_time6(void)
{
 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
  NVIC_InitStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
    
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
	TIM_TimeBaseInitStructure.TIM_Prescaler=500;//50
  TIM_TimeBaseInitStructure.TIM_Period=999;//999;//1ms
  TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//
  TIM_TimeBaseInit(TIM6, &TIM_TimeBaseInitStructure);
  
  TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
  TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
  TIM_SetCounter(TIM6, 0); 
  TIM_Cmd(TIM6,ENABLE);
}
//================================= config timer7 1ms ================================
void Config_int_time7(void)
{
 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
  NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
    
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
	TIM_TimeBaseInitStructure.TIM_Prescaler=50;//500;
  TIM_TimeBaseInitStructure.TIM_Period=999;//999;//1ms
  TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//
  TIM_TimeBaseInit(TIM7, &TIM_TimeBaseInitStructure);
  
  TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
  TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
  TIM_SetCounter(TIM7, 0); 
  TIM_Cmd(TIM7,ENABLE);
}

//===================================PWM===========================================
void Config_pwm_time_t8(void)
{
 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
  GPIO_InitTypeDef  GPIO_InitStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOD, ENABLE);
	
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);// ch1
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_TIM8);// ch2
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM8);// ch3
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_TIM8);// ch4
	
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Mode =GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType =GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);	
	
//Fpwm=84000000/(TIM_Period*TIM_Prescaler);
	//50=84000000/(40*TIM_Prescaler);
	TIM_TimeBaseInitStructure.TIM_Prescaler=84000000/(2000*255); // fpwm=2khz
  TIM_TimeBaseInitStructure.TIM_Period=256;
//  TIM_TimeBaseInitStructure.TIM_Prescaler=186; // fpwm=4khz
//  TIM_TimeBaseInitStructure.TIM_Period=10000;
  TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV2;//TIM_CKD_DIV2;
  TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseInitStructure); 

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_Cmd(TIM8,ENABLE);
  TIM_SetCounter(TIM8, 0);
	//////////////	
  TIM_OC1Init(TIM8, &TIM_OCInitStructure);
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);
	TIM_OC4Init(TIM8, &TIM_OCInitStructure);	  
  TIM_CtrlPWMOutputs(TIM8,ENABLE);

}
//============================ config pwm timer4 ================================
void Config_pwm_time_t4(void)
{
 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
	GPIO_InitTypeDef  GPIO_InitStructure;
  TIM_OCInitTypeDef  TIM_OCInitStructure;
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOC, ENABLE);
		
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4); // ch1
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);// ch2
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);// ch3
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);  //ch4
	
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12|GPIO_Pin_15|GPIO_Pin_13|GPIO_Pin_14;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOD, &GPIO_InitStructure);
		/*
	TIM_TimeBaseStructure.TIM_Period = 839800000; // 84Mhz/839800000 = 0.1 (Hz)
TIM_TimeBaseStructure.TIM_Prescaler = 0; // Maximum TIM5 clock: 84.000.000Hz
TIM_TimeBaseStructure.TIM_ClockDivision = 0;
TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	*/
	TIM_TimeBaseInitStructure.TIM_Prescaler=84000000/(2000*255); // fpwm=2khz
  TIM_TimeBaseInitStructure.TIM_Period=256;
  TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV2;
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStructure);
  
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = 0;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_Cmd(TIM4,ENABLE);
  TIM_SetCounter(TIM4, 0);
   
  TIM_OC1Init(TIM4, &TIM_OCInitStructure);
	TIM_OC2Init(TIM4, &TIM_OCInitStructure);
	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
	TIM_OC4Init(TIM4, &TIM_OCInitStructure);

}

//===========================PWM RC SECVOR==================================
void Config_pwm_time_t9(void)
{
 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
  GPIO_InitTypeDef  GPIO_InitStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	 
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_TIM9);// ch2
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM9);// ch1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Mode =GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType =GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
	
//Fpwm=84000000/(TIM_Period*TIM_Prescaler);
	//50=84000000/(40*TIM_Prescaler);
// 	TIM_TimeBaseInitStructure.TIM_Prescaler=84000000/(1000*255); // fpwm=2khz
//  TIM_TimeBaseInitStructure.TIM_Period=255;
  TIM_TimeBaseInitStructure.TIM_Prescaler=186; 
  TIM_TimeBaseInitStructure.TIM_Period=10000;
  TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
  TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//
  TIM_TimeBaseInit(TIM9, &TIM_TimeBaseInitStructure); 
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = 0;
//	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC1Init(TIM9, &TIM_OCInitStructure);
	TIM_OC2Init(TIM9, &TIM_OCInitStructure);
  TIM_CtrlPWMOutputs(TIM9,ENABLE);
  TIM_Cmd(TIM9,ENABLE);
  TIM_SetCounter(TIM9, 0);
//	
//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; // dir control driver
//  GPIO_InitStructure.GPIO_Mode =GPIO_Mode_OUT;
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
//  GPIO_InitStructure.GPIO_OType =GPIO_OType_PP;
//  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
//  GPIO_Init(GPIOA, &GPIO_InitStructure);
}

//============================ config encoder timer2 && timer3 ===========================
void Config_encoder_timer2_timer3(void)
{
 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
	TIM_ICInitTypeDef TIM_ICInitStructure;
  GPIO_InitTypeDef  GPIO_InitStructure;
	 NVIC_InitTypeDef NVIC_InitStructure;
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
	
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_TIM2); // tim2
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_TIM2);

  GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_TIM3); // tim3
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_TIM3);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;	
  GPIO_Init(GPIOB, &GPIO_InitStructure);
	
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
	
//  GPIO_InitStructure.GPIO_Pin = ;
//  GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	TIM_TimeBaseInitStructure.TIM_Prescaler=0;
  TIM_TimeBaseInitStructure.TIM_Period=65535;
  TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStructure);
  TIM_TimeBaseInit(TIM3, &TIM_TimeBaseInitStructure);
    
  TIM_ICInitStructure.TIM_Channel=TIM_Channel_1|TIM_Channel_2;
  TIM_ICInitStructure.TIM_ICPolarity=TIM_ICPolarity_Falling;
  TIM_ICInitStructure.TIM_ICFilter=20;
  TIM_ICInitStructure.TIM_ICSelection=TIM_ICSelection_DirectTI;
  TIM_ICInit(TIM2, &TIM_ICInitStructure);
  TIM_ICInit(TIM3, &TIM_ICInitStructure);
	
  TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Falling);
  TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Falling);

  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
  TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
  TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
  TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
  
  TIM_Cmd(TIM2,ENABLE); 
	TIM_Cmd(TIM3,ENABLE);
	
  TIM_SetCounter(TIM2, 0); 
	TIM_SetCounter(TIM3, 0);
    
 ////////////
   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
  /* Enable the TIM3 gloabal Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
}


//========================== config encoder timer2 && timer3 ================================
void Config_encoder_timer1(void)
{
 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
	TIM_ICInitTypeDef TIM_ICInitStructure;
  GPIO_InitTypeDef  GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE , ENABLE);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_TIM1); // tim5
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_TIM1);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9|GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;	
  GPIO_Init(GPIOE, &GPIO_InitStructure);

	TIM_TimeBaseInitStructure.TIM_Prescaler=0;
  TIM_TimeBaseInitStructure.TIM_Period=65535;
  TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;//
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStructure);
    
  TIM_ICInitStructure.TIM_Channel=TIM_Channel_1|TIM_Channel_2;
  TIM_ICInitStructure.TIM_ICPolarity=TIM_ICPolarity_Falling;
  TIM_ICInitStructure.TIM_ICFilter=20;
  TIM_ICInitStructure.TIM_ICSelection=TIM_ICSelection_DirectTI;
  TIM_ICInit(TIM1, &TIM_ICInitStructure);	
  TIM_EncoderInterfaceConfig(TIM1, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Falling);
  TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
  TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
  TIM_Cmd(TIM1,ENABLE); 	
  TIM_SetCounter(TIM1, 0); 
    
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
  NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
}
//------------------------------------ config ADC DMA ----------------------------- 
void Config_ADC1_DMA(void)
{
  ADC_InitTypeDef       ADC_InitStructure;
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  DMA_InitTypeDef       DMA_InitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  /* Enable ADC3, DMA2 and GPIO clocks ****************************************/
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);

  /* DMA2 Stream0 channel0 configuration **************************************/
  DMA_InitStructure.DMA_Channel = DMA_Channel_0;  
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC1_DR_ADDRESS;
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&_ADC1_Value;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = 5;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(DMA2_Stream0, &DMA_InitStructure);
  DMA_Cmd(DMA2_Stream0, ENABLE);
//	config_ngat_dma();// cau hinh ngat dma phai dat sau lenh enable kenh dma.

  /* Configure ADC1 Channel7 pin as analog input ******************************/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
  /* ADC Common Init **********************************************************/
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div8;
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;//ADC_DMAAccessMode_1;//
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
  ADC_CommonInit(&ADC_CommonInitStructure);

  /* ADC3 Init ****************************************************************/
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  ADC_InitStructure.ADC_ScanConvMode = ENABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfConversion = 5;
  ADC_Init(ADC1, &ADC_InitStructure);

  /* ADC3 regular channel7 configuration *************************************/
	#define sample_time_adc1 ADC_SampleTime_84Cycles
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, sample_time_adc1);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, sample_time_adc1);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 3, sample_time_adc1);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 4, sample_time_adc1);
  ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, sample_time_adc1);
//	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 6, sample_time_adc1);
//	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 7, sample_time_adc1);
//	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 8, sample_time_adc1); // cac so rank la so thu tu chuyen doi adc 

 /* Enable DMA request after last transfer (Single-ADC mode) */
  ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
//ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
  /* Enable ADC1 DMA */
  ADC_DMACmd(ADC1, ENABLE);

  /* Enable ADC1 */
  ADC_Cmd(ADC1, ENABLE);
	ADC_SoftwareStartConv(ADC1);
}
//----------------------------------- config int uart1 ------------------------------
void Config_int_uart1_rx(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;// 
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // muc do uu tien ngat thu 15
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;// cho phep su dung ngat
  NVIC_Init(&NVIC_InitStructure);  	// cau hinh cho bang vector ngat
		
}

//////////////////////////////////////////////////////////////////////////////////////////////////////
void UART1_DMA_RX(u32 baudrate)
{		
		DMA_InitTypeDef DMA_InitStructure;
		NVIC_InitTypeDef NVIC_InitStructure;
    USART_InitTypeDef USART_InitStructure;
		GPIO_InitTypeDef GPIO_InitStructure;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
   /*-------------------------- GPIO Configuration ----------------------------*/
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_Init(GPIOA, &GPIO_InitStructure);
   /* Connect USART pins to AF */
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

   USART_InitStructure.USART_BaudRate = baudrate;
   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   USART_InitStructure.USART_StopBits = USART_StopBits_1;
   USART_InitStructure.USART_Parity = USART_Parity_No;
   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; 
   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; 
   USART_Init(USART1, &USART_InitStructure); 
   USART_Cmd(USART1, ENABLE);

   /* Configure the Priority Group to 2 bits */
   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   /* Enable the UART4 RX DMA Interrupt */
   NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream2_IRQn;
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   NVIC_Init(&NVIC_InitStructure);
	
	 DMA_DeInit(DMA2_Stream2);
   DMA_InitStructure.DMA_Channel = DMA_Channel_4;
   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory; // Receive
   DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)RX_USART1;
   DMA_InitStructure.DMA_BufferSize = 10;//(uint16_t)sizeof(Buffer);
   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR;
   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
   DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
   DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
   DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single; 
   DMA_Init(DMA2_Stream2, &DMA_InitStructure); 
   /* Enable DMA Stream Half Transfer and Transfer Complete interrupt */
   USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE); // Enable USART Rx DMA Request
	 DMA_ITConfig(DMA2_Stream2, DMA_IT_TC, ENABLE);  
   /* Enable the DMA RX Stream */
   DMA_Cmd(DMA2_Stream2, ENABLE);
	 

}
//============================================
void UART3_DMA_RX(u32 baudrate)
{		
		DMA_InitTypeDef DMA_InitStructure;
		NVIC_InitTypeDef NVIC_InitStructure;
    USART_InitTypeDef USART_InitStructure;
		GPIO_InitTypeDef GPIO_InitStructure;
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
   /*-------------------------- GPIO Configuration ----------------------------*/
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_Init(GPIOD, &GPIO_InitStructure);
   /* Connect USART pins to AF */
   GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);
   GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);

   USART_InitStructure.USART_BaudRate = baudrate;
   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   USART_InitStructure.USART_StopBits = USART_StopBits_1;
   USART_InitStructure.USART_Parity = USART_Parity_No;
   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; 
   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; 
   USART_Init(USART3, &USART_InitStructure); 
   USART_Cmd(USART3, ENABLE);

/////////////////////////////////////////////	   
   
   /* Configure the Priority Group to 2 bits */
   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   /* Enable the UART4 RX DMA Interrupt */
   NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream1_IRQn;
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   NVIC_Init(&NVIC_InitStructure);
	
	 DMA_DeInit(DMA1_Stream1);
   DMA_InitStructure.DMA_Channel = DMA_Channel_4;
   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory; // Receive
   DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)MANG_GAME;
   DMA_InitStructure.DMA_BufferSize = 8;//(uint16_t)sizeof(Buffer);
   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART3->DR;
   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
   DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
   DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
   DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single; 
   DMA_Init(DMA1_Stream1, &DMA_InitStructure); 
   /* Enable the USART Rx DMA request */
   USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE); 
   /* Enable DMA Stream Half Transfer and Transfer Complete interrupt */
   USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE); // Enable USART Rx DMA Request
	 DMA_ITConfig(DMA1_Stream1, DMA_IT_TC, ENABLE);  
   /* Enable the DMA RX Stream */
   DMA_Cmd(DMA1_Stream1, ENABLE);	
}

//============================UART4=======================================
void UART4_DMA_RX(u32 baudrate)
{		
		DMA_InitTypeDef DMA_InitStructure;
		NVIC_InitTypeDef NVIC_InitStructure;
    USART_InitTypeDef USART_InitStructure;
		GPIO_InitTypeDef GPIO_InitStructure;
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
   /*-------------------------- GPIO Configuration ----------------------------*/
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_Init(GPIOA, &GPIO_InitStructure);
   /* Connect USART pins to AF */
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_UART4);
   GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_UART4);

   USART_InitStructure.USART_BaudRate = baudrate;
   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   USART_InitStructure.USART_StopBits = USART_StopBits_1;
   USART_InitStructure.USART_Parity = USART_Parity_No;
   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; 
   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; 
   USART_Init(UART4, &USART_InitStructure); 
   USART_Cmd(UART4, ENABLE);

/////////////////////////////////////////////	   
   
   /* Configure the Priority Group to 2 bits */
   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   /* Enable the UART4 RX DMA Interrupt */
   NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream2_IRQn;
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   NVIC_Init(&NVIC_InitStructure);
	
	 DMA_DeInit(DMA1_Stream2);
   DMA_InitStructure.DMA_Channel = DMA_Channel_4;
   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory; // Receive
   DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)MANG_GAME;
   DMA_InitStructure.DMA_BufferSize = 8;//(uint16_t)sizeof(Buffer);
   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART4->DR;
   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
   DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
   DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
   DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single; 
   DMA_Init(DMA1_Stream2, &DMA_InitStructure); 
   /* Enable the USART Rx DMA request */
   USART_DMACmd(UART4, USART_DMAReq_Rx, ENABLE); 
   /* Enable DMA Stream Half Transfer and Transfer Complete interrupt */
   USART_DMACmd(UART4, USART_DMAReq_Rx, ENABLE); // Enable USART Rx DMA Request
	 DMA_ITConfig(DMA1_Stream2, DMA_IT_TC, ENABLE);  
   /* Enable the DMA RX Stream */
   DMA_Cmd(DMA1_Stream2, ENABLE);	
}

//========================================================================
void UART5_DMA_TX(u32 baudrate)
{		
		DMA_InitTypeDef DMA_InitStructure;
		NVIC_InitTypeDef NVIC_InitStructure;
    USART_InitTypeDef USART_InitStructure;
		GPIO_InitTypeDef GPIO_InitStructure;
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOC, ENABLE);
   /*-------------------------- GPIO Configuration ----------------------------*/
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_Init(GPIOD, &GPIO_InitStructure);
	
	 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
	 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   GPIO_Init(GPIOC, &GPIO_InitStructure);
	
   /* Connect USART pins to AF */
   GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_UART5);
   GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_UART5);
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  /* Enable the UART8 TX DMA Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream7_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 5;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  /* Enable the UART8 RX DMA Interrupt */
//  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream0_IRQn;
//  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
//  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
//  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
//  NVIC_Init(&NVIC_InitStructure);
	///////////////////////////

   USART_InitStructure.USART_BaudRate = baudrate;
   USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   USART_InitStructure.USART_StopBits = USART_StopBits_1;
   USART_InitStructure.USART_Parity = USART_Parity_No;
   USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; 
   USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; 
   USART_Init(UART5, &USART_InitStructure); 
   USART_Cmd(UART5, ENABLE);

/////////////////////////////////////////////	   
   


  // UART8_TX DMA Channel 5, DMA1, Stream0

  DMA_DeInit(DMA1_Stream7);

  DMA_InitStructure.DMA_Channel = DMA_Channel_4;
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; // Transmit
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Buffer_HMI;
  DMA_InitStructure.DMA_BufferSize = (uint16_t)sizeof(Buffer_HMI)-1 ;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART5->DR;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;//DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

  DMA_Init(DMA1_Stream7, &DMA_InitStructure);

  /* Enable the USART Tx DMA request */
  USART_DMACmd(UART5, USART_DMAReq_Tx, ENABLE);

  /* Enable DMA Stream Transfer Complete interrupt */
  DMA_ITConfig(DMA1_Stream7, DMA_IT_TC, ENABLE);

  /* Enable the DMA TX Stream */

DMA_Cmd(DMA1_Stream7, ENABLE);

////////////////////////////////////////////////////////////////////////////////
  // UART8_RX DMA Channel 5, DMA1, Stream6

//  DMA_DeInit(DMA1_Stream0);

//  DMA_InitStructure.DMA_Channel = DMA_Channel_4;
//  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory; // Receive
//  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Buffer_HMI;
//  DMA_InitStructure.DMA_BufferSize = (uint16_t)sizeof(Buffer_HMI) - 1;
//  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART5->DR;
//  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
//  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
//  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
//  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
//  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
//  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
//  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
//  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
//  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
//  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

//  DMA_Init(DMA1_Stream0, &DMA_InitStructure);

//  /* Enable the USART Rx DMA request */
//  USART_DMACmd(UART5, USART_DMAReq_Rx, ENABLE);

//  /* Enable DMA Stream Transfer Complete interrupt */
//  DMA_ITConfig(DMA1_Stream0, DMA_IT_TC, ENABLE);

//  /* Enable the DMA RX Stream */
//  DMA_Cmd(DMA1_Stream0, ENABLE);

}

//================================INT=========================================
void ngat_ngoai(void)   
	{
			GPIO_InitTypeDef  GPIO_InitStructure;
			NVIC_InitTypeDef  NVIC_InitStructure;
			EXTI_InitTypeDef  EXTI_InitStructure;

		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE); 
    /* Enable SYSCFG clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    
    /* Configure PB5 PB6 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
  
    /* Connect EXTI Line5, Line6 to PB5,PB6 pin */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource2);
 //   SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource3);
		
    /* Configure EXTI Line5, Line6 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line2 ;
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
  
    /* Enable and set EXTI Line5, Line6 Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn  ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
		
		}

//------------------------------ send uart1 ------------------------

void SEND_UART(u8 _UART,u8 _GIA_TRI)
{
	if(_UART==1) 		{  USART_SendData(USART1, (uint8_t) _GIA_TRI); 	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET){} }
	else if(_UART==3) {  USART_SendData(USART2, (uint8_t) _GIA_TRI); 	while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET){} }
	else if(_UART==4) {  USART_SendData(UART4, (uint8_t) _GIA_TRI); 	while (USART_GetFlagStatus(UART4, USART_FLAG_TC) == RESET){} }
	else if(_UART==5) {  USART_SendData(UART5, (uint8_t) _GIA_TRI); 	while (USART_GetFlagStatus(UART5, USART_FLAG_TC) == RESET){} }

}
//--------------------------------- read encoder 2 or 3 -----------------------------
//vs32 Read_encoder(TIM_TypeDef* TIMx, char stt)
s32 READ_ENCODER(u8 TIMER)
{
	if(TIMER==1) 			return (num_over_t1<<16)|TIM_GetCounter(TIM1);
	else if(TIMER==2) return (num_over_t2<<16)|TIM_GetCounter(TIM2);
	else if(TIMER==3) 			return (num_over_t3<<16)|TIM_GetCounter(TIM3);
	else if(TIMER==9) return (num_over_t9<<16)|TIM_GetCounter(TIM9);
	else return 0;
}

//--------------------------- reset encoder doc -------------------------

void RESET_ENCODER(u8 TIMER)
{
	if(TIMER==1) 	{	TIM1->CNT = 0;num_over_t1 = 0;	}
	else if(TIMER==2) {	TIM2->CNT = 0;num_over_t2 = 0;}	
	else if(TIMER==3) {	TIM3->CNT = 0;num_over_t3 = 0;}
	else if(TIMER==9) {	TIM9->CNT = 0;num_over_t9 = 0;}	

}
//-------------------------------- reset uart-----------------------------------------
void run_read_gyro_uart1(void)
{ 
	u32 i;
  en_gyro=0;
  for(i=0;i<2;i++)
  {
		SEND_UART(1,'a');
		delay_ms(50);
  }
  en_gyro=1;
  data_tx_gyro='z';
}
///////======================================================================================

void HMI_TRAN(vs32 _so_dong)
{
		vs32 _i,_chua_cac_bit=0;
		char _ghep_bit[40];
		char _chu_cac_bit[40];
		_ghep_bit[0]=0;
		_chu_cac_bit[0]=0;
	
switch (_so_dong) {
		case 0:
			//printf("Khong");
			break;
		case 1:
			HMI_DMI("IMU        ",IMU,1);
			break;
		case 2:

			HMI_DMI("PS2        ",MANG_GAME[0],2);
		
			break;
		case 3:
			HMI_DMI("ADC4        ",_ADC1_Value[4],3);
			break;
		case 4:
			HMI_DMI("ADC1        ",_ADC1_Value[1],4);
			break;
		case 5:
			HMI_DMI("ADC2        ",_ADC1_Value[2],5);
			break;
		case 6:
			HMI_DMI("ADC3        ",_ADC1_Value[3],6);
			break;
		case 7:
			HMI_DMI("ENCODER1: ",(num_over_t2<<16)|TIM_GetCounter(TIM2),7);
			break;
		case 8:
			HMI_DMI("ENCODER2: ",(num_over_t3<<16)|TIM_GetCounter(TIM3),8);
			break;
		case 9:
			HMI_DMI("ENCODER3: ",(num_over_t1<<16)|TIM_GetCounter(TIM1),9);
			break;
		case 10:
			HMI_DMI("ENCODER4: ",(num_over_t9<<16)|TIM_GetCounter(TIM9),10);
			break;
		case 11:
		//	strcat(_chu_cac_bit,"1");
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_1));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_7));		
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_8));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_10));		
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_12));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_13));		
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_14));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_15));		
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_10));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_11));		
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_12));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_13));		
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_14));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_15));		
			strcat(_chu_cac_bit,_ghep_bit);		
			sprintf(_ghep_bit,"%d",GPIO_ReadInputDataBit(GPIOD,GPIO_Pin_10));	
			strcat(_chu_cac_bit,_ghep_bit);
			HMI_PUTS("IN: ",_chu_cac_bit,11);
			break;
		case 12:
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOA,GPIO_Pin_5));		
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_3));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_4));		
			strcat(_chu_cac_bit,_ghep_bit);		
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_5));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_6));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_7));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOB,GPIO_Pin_6));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOB,GPIO_Pin_7));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOB,GPIO_Pin_8));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOB,GPIO_Pin_9));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOE,GPIO_Pin_0));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOE,GPIO_Pin_1));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOE,GPIO_Pin_2));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOE,GPIO_Pin_3));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOE,GPIO_Pin_4));	
			strcat(_chu_cac_bit,_ghep_bit);
			sprintf(_ghep_bit,"%d",GPIO_ReadOutputDataBit(GPIOE,GPIO_Pin_5));	
			strcat(_chu_cac_bit,_ghep_bit);
			HMI_PUTS("OUT:",_chu_cac_bit,12);
			break;	
		case 13:
			sprintf(_ghep_bit,"%d",LINE_0);	
			strcat(_chu_cac_bit,_ghep_bit);
			strcat(_chu_cac_bit," ");
			sprintf(_ghep_bit,"%d",LINE_1);		
			strcat(_chu_cac_bit,_ghep_bit);
			strcat(_chu_cac_bit," ");
			sprintf(_ghep_bit,"%d",LINE_2);		
			strcat(_chu_cac_bit,_ghep_bit);
			strcat(_chu_cac_bit," ");
			sprintf(_ghep_bit,"%d",LINE_3);		
			strcat(_chu_cac_bit,_ghep_bit);
			strcat(_chu_cac_bit," ");
			sprintf(_ghep_bit,"%d",LINE_4);		
			strcat(_chu_cac_bit,_ghep_bit);
			strcat(_chu_cac_bit," ");
			sprintf(_ghep_bit,"%d",LINE_5);		
			strcat(_chu_cac_bit,_ghep_bit);
			strcat(_chu_cac_bit," ");
			sprintf(_ghep_bit,"%d",LINE_6);		
			strcat(_chu_cac_bit,_ghep_bit);
			strcat(_chu_cac_bit," ");
			sprintf(_ghep_bit,"%d",LINE_7);		
			strcat(_chu_cac_bit,_ghep_bit);			
			HMI_PUTS("LINE:",_chu_cac_bit,13);
			break;		
		case 14:
			HMI_DMI("value= ",bien_hmi,14);
			break;	
		case 15:
			HMI_PUT_j(bien_hmi);
			break;			
		//default:
		//	phai xoa chuoi
		
		
	}
}
///
void HMI_RUN_LOOP(vs32 _cause)
{
		if(HMI_LOOP>_cause)HMI_LOOP=0;
	else HMI_LOOP++;
	HMI_TRAN(HMI_LOOP);
	}
void Khoi_Dong_IMU(void)
{
	run_read_gyro_uart1();
	delay_ms(200);
		while (RX_USART1[0]||RX_USART1[1]){
			delay_ms(200);
			DMA_Cmd(DMA2_Stream2, DISABLE);
			USART_Cmd(USART1, DISABLE);
			delay_ms(200);
			USART_Cmd(USART1, ENABLE);
			DMA_Cmd(DMA2_Stream2, ENABLE);
			run_read_gyro_uart1();//reset lai laban 
	}
}

