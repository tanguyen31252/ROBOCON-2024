<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Project\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Project\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Mar 02 15:37:46 2016
<BR><P>
<H3>Maximum Stack Usage =        236 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Auto_program &rArr; LEO_COT_XANH_1 &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[5f]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[5c]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[138]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[139]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[13c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; robotAnalytics &rArr; robotDirectionAnalytics &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colorSensorDetect
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kich_Xylanh
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get_mode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIxmit
</UL>

<P><STRONG><a name="[9d]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kich_Xylanh
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Truot_ngang
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_read_gyro_uart1
</UL>

<P><STRONG><a name="[68]"></a>lcd_printStr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putsf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
</UL>

<P><STRONG><a name="[6b]"></a>lcd_printInt</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcd_printInt &rArr; lcd_putsf &rArr; lcd_Data_Write &rArr; lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putsf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdViewer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun_clockwise111
</UL>

<P><STRONG><a name="[6d]"></a>lcd_printInt_32</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putsf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[6e]"></a>Config_out_mode</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Config_out_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>Config_in_mode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Config_in_mode &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>Config_int_time6</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Config_int_time6 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>Config_int_time7</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[7b]"></a>Config_pwm_time_t1</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Config_pwm_time_t1 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>Config_pwm_time_t4</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Config_pwm_time_t4 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>NVIC_Config_tim2_3</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Config_tim2_3 &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
</UL>

<P><STRONG><a name="[85]"></a>Config_encoder_timer2_timer3</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Config_encoder_timer2_timer3 &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_tim2_3
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>Config_ADC1_DMA</STRONG> (Thumb, 226 bytes, Stack size 128 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Config_ADC1_DMA &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Config_int_uart1_rx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Config_int_uart1_rx &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
</UL>

<P><STRONG><a name="[93]"></a>Config_ngat_dma2_uart1_rx</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[94]"></a>config_uart1</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_uart1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_uart1_rx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>putchar1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_read_gyro_uart1
</UL>

<P><STRONG><a name="[9b]"></a>Read_uart1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[9c]"></a>run_read_gyro_uart1</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = run_read_gyro_uart1 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Read_encoder</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>

<P><STRONG><a name="[a0]"></a>Encoder_doc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder_doc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdViewer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
</UL>

<P><STRONG><a name="[a1]"></a>Encoder_ngang</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder_ngang
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdViewer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
</UL>

<P><STRONG><a name="[a2]"></a>Vputchar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vprintf
</UL>

<P><STRONG><a name="[a3]"></a>Vputchar1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vprintf1
</UL>

<P><STRONG><a name="[a4]"></a>Vprintf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vputchar
</UL>

<P><STRONG><a name="[a5]"></a>Vprintf1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vputchar1
</UL>

<P><STRONG><a name="[e1]"></a>Reset_encoder_doc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Truot_ngang
</UL>

<P><STRONG><a name="[e2]"></a>Reset_encoder_ngang</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Truot_ngang
</UL>

<P><STRONG><a name="[a6]"></a>SPIxmit</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get_mode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
</UL>

<P><STRONG><a name="[a8]"></a>gp_update_btn</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIxmit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kich_Xylanh
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>

<P><STRONG><a name="[a9]"></a>gp_get_mode</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gp_get_mode &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIxmit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>Config_gamepad_PS2</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Config_gamepad_PS2 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>setMotor</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
</UL>

<P><STRONG><a name="[c5]"></a>setAllMotor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_Stop
</UL>

<P><STRONG><a name="[c6]"></a>robotAngle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
</UL>

<P><STRONG><a name="[ab]"></a>roundF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = roundF &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
</UL>

<P><STRONG><a name="[c1]"></a>absI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotFixAngle
</UL>

<P><STRONG><a name="[af]"></a>giaToc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = giaToc &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
</UL>

<P><STRONG><a name="[b3]"></a>maxF4</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = maxF4
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
</UL>

<P><STRONG><a name="[13d]"></a>robotIsRun</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>robotSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>calculateMotor</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxF4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotCurve
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateStop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
</UL>

<P><STRONG><a name="[b9]"></a>robotStop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = robotStop &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotGamePadControl
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotFixAngle
</UL>

<P><STRONG><a name="[ba]"></a>robotRotateStop</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = robotRotateStop &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotGamePadControl
</UL>

<P><STRONG><a name="[13f]"></a>robotSetACC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>robotCurve</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun_clockwise111
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
</UL>

<P><STRONG><a name="[bd]"></a>robotRun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = robotRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotGamePadControl
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
</UL>

<P><STRONG><a name="[be]"></a>robotRotate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
</UL>

<P><STRONG><a name="[bf]"></a>robotRotateFree</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = robotRotateFree &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotGamePadControl
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
</UL>

<P><STRONG><a name="[c0]"></a>robotFixAngle</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absI
</UL>

<P><STRONG><a name="[c2]"></a>robotDirectionAnalytics</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = robotDirectionAnalytics &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absI
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
</UL>

<P><STRONG><a name="[c4]"></a>ac_Stop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAllMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
</UL>

<P><STRONG><a name="[c7]"></a>ac_SpeedACC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
</UL>

<P><STRONG><a name="[66]"></a>robotAnalytics</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = robotAnalytics &rArr; robotDirectionAnalytics &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_SpeedACC
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_Stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giaToc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundF
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAngle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>cb_TT</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_TT
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colorSensorDetect
</UL>

<P><STRONG><a name="[cb]"></a>cb_TS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_TS
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colorSensorDetect
</UL>

<P><STRONG><a name="[cc]"></a>cb_PT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_PT
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colorSensorDetect
</UL>

<P><STRONG><a name="[cd]"></a>cb_PS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_PS
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colorSensorDetect
</UL>

<P><STRONG><a name="[140]"></a>sensorDetectXXXXX</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>sensorDetect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colorSensorDetect
</UL>

<P><STRONG><a name="[67]"></a>colorSensorDetect</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = colorSensorDetect &rArr; cb_PS
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorDetect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_PS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_PT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_TS
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_TT
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>wantExit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wantExit &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_xanh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_do
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bap_benh_auto
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Truot_ngang
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao_While
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
</UL>

<P><STRONG><a name="[d0]"></a>robotLineDetect</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = robotLineDetect &rArr; robotRotateFree &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_xanh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_do
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
</UL>

<P><STRONG><a name="[d1]"></a>robotLineRun</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
</UL>

<P><STRONG><a name="[d5]"></a>robotLineRun_clockwise111</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotCurve
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt
</UL>

<P><STRONG><a name="[d6]"></a>Nang_Truc</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Nang_Truc
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
</UL>

<P><STRONG><a name="[d7]"></a>Ha_Truc</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ha_Truc
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
</UL>

<P><STRONG><a name="[d8]"></a>Nang_Truc_While</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Nang_Truc_While &rArr; wantExit &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_xanh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_do
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
</UL>

<P><STRONG><a name="[d9]"></a>Ha_Truc_While</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Ha_Truc_While &rArr; wantExit &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
</UL>

<P><STRONG><a name="[da]"></a>Truot_Ra</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Truot_Ra
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_xanh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_do
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
</UL>

<P><STRONG><a name="[db]"></a>Truot_Vao</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Truot_Vao
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
</UL>

<P><STRONG><a name="[dc]"></a>Truot_Ra_While</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Truot_Ra_While &rArr; wantExit &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
</UL>

<P><STRONG><a name="[dd]"></a>Truot_Vao_While</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Truot_Vao_While &rArr; wantExit &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
</UL>

<P><STRONG><a name="[de]"></a>Nang_truc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Nang_truc
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
</UL>

<P><STRONG><a name="[df]"></a>Truot_ngang</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Truot_ngang
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>Reset_Truot_ngang</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Reset_Truot_ngang &rArr; wantExit &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>Kich_Xylanh</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Kich_Xylanh &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>bap_benh_auto</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bap_benh_auto &rArr; wantExit &rArr; gp_update_btn &rArr; SPIxmit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
</UL>

<P><STRONG><a name="[e5]"></a>AUTO_BB_DO</STRONG> (Thumb, 768 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = AUTO_BB_DO &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[e6]"></a>XOAY_BAPBENH_DO</STRONG> (Thumb, 1244 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = XOAY_BAPBENH_DO &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bap_benh_auto
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[e7]"></a>XICH_DU_DO</STRONG> (Thumb, 888 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = XICH_DU_DO &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao_While
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[e8]"></a>BAN_XICHDU_DO</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BAN_XICHDU_DO &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[e9]"></a>BAN_XICHDU_DO_Timeout</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[ea]"></a>DON_XICHDU_DO</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DON_XICHDU_DO &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[eb]"></a>LEO_COT_DO</STRONG> (Thumb, 1314 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LEO_COT_DO &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[ec]"></a>CAUTHANG_DO</STRONG> (Thumb, 806 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CAUTHANG_DO &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_truc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[ed]"></a>THA_COT_DO</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = THA_COT_DO &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_truc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[ee]"></a>THA_CAUTHANG_DO</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = THA_CAUTHANG_DO &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[ef]"></a>AUTO_BB_XANH</STRONG> (Thumb, 782 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = AUTO_BB_XANH &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f0]"></a>XOAY_BAPBENH_XANH</STRONG> (Thumb, 1288 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = XOAY_BAPBENH_XANH &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bap_benh_auto
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f1]"></a>XICH_DU_XANH</STRONG> (Thumb, 868 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = XICH_DU_XANH &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao_While
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f2]"></a>BAN_XICHDU_XANH</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BAN_XICHDU_XANH &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f3]"></a>DON_XICHDU_XANH</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DON_XICHDU_XANH &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f4]"></a>LEO_COT_XANH</STRONG> (Thumb, 1326 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LEO_COT_XANH &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f5]"></a>CAUTHANG_XANH</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CAUTHANG_XANH &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_truc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f6]"></a>THA_COT_XANH</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = THA_COT_XANH &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_truc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f7]"></a>THA_CAUTHANG_XANH</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = THA_CAUTHANG_XANH &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f8]"></a>fix_bapbenh_do</STRONG> (Thumb, 672 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fix_bapbenh_do &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bap_benh_auto
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[f9]"></a>fix_bapbenh_xanh</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fix_bapbenh_xanh &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bap_benh_auto
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[fa]"></a>fix_xichdu_do</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = fix_xichdu_do &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao_While
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[fb]"></a>fix_xichdu_xanh</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = fix_xichdu_xanh &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao_While
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[fc]"></a>fix_leocot_do</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fix_leocot_do &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[fd]"></a>fix_leocot_xanh</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fix_leocot_xanh &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[fe]"></a>fix_cauthang_do</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fix_cauthang_do &rArr; robotLineDetect &rArr; robotRotateFree &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[ff]"></a>fix_cauthang_xanh</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fix_cauthang_xanh &rArr; robotLineDetect &rArr; robotRotateFree &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[100]"></a>LEO_COT_DO_1</STRONG> (Thumb, 1288 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LEO_COT_DO_1 &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[101]"></a>LEO_COT_XANH_1</STRONG> (Thumb, 1272 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LEO_COT_XANH_1 &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wantExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_ngang
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_encoder_doc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
</UL>

<P><STRONG><a name="[102]"></a>Auto_program_analoge</STRONG> (Thumb, 760 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Auto_program_analoge &rArr; LEO_COT_XANH_1 &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_xanh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_do
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>robotGamePadControl</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = robotGamePadControl &rArr; robotRotateFree &rArr; robotRotate &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateFree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRun
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotateStop
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>lcdViewer</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lcdViewer &rArr; lcd_printInt &rArr; lcd_putsf &rArr; lcd_Data_Write &rArr; lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>Auto_program</STRONG> (Thumb, 618 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Auto_program &rArr; LEO_COT_XANH_1 &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_xanh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_do
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_xanh
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_bapbenh_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = main &rArr; Auto_program &rArr; LEO_COT_XANH_1 &rArr; robotLineRun &rArr; robotCurve &rArr; calculateMotor &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Clear
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdViewer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotGamePadControl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kich_Xylanh
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Truot_ngang
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_ngang
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_truc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineDetect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotStop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_gamepad_PS2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_get_mode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gp_update_btn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_read_gyro_uart1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_in_mode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_out_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[108]"></a>lcd_data_line_write</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Data_Write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Control_Write
</UL>

<P><STRONG><a name="[10a]"></a>lcd_Init_HW</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lcd_Init_HW &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Init
</UL>

<P><STRONG><a name="[10b]"></a>lcd_Control_Write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_Control_Write &rArr; lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_line_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Home
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Clear
</UL>

<P><STRONG><a name="[10c]"></a>lcd_Data_Write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_Data_Write &rArr; lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_line_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putsf
</UL>

<P><STRONG><a name="[106]"></a>lcd_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_Init &rArr; lcd_Init_HW &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Control_Write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Init_HW
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>lcd_Home</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Control_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[107]"></a>lcd_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_Clear &rArr; lcd_Control_Write &rArr; lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Control_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>lcd_gotoxy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_gotoxy &rArr; lcd_Control_Write &rArr; lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Control_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt_32
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printStr
</UL>

<P><STRONG><a name="[6a]"></a>lcd_putsf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_putsf &rArr; lcd_Data_Write &rArr; lcd_data_line_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt_32
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printStr
</UL>

<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_uart1_rx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_tim2_3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
</UL>

<P><STRONG><a name="[74]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ngat_dma2_uart1_rx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_uart1_rx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config_tim2_3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
</UL>

<P><STRONG><a name="[142]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>GPIO_DeInit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[70]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Init_HW
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_gamepad_PS2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_in_mode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_out_mode
</UL>

<P><STRONG><a name="[145]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdViewer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_program_analoge
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH_1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_xanh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_cauthang_do
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_xanh
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_leocot_do
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_xanh
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_xichdu_do
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_XANH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_XANH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_XANH
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_XANH
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_XANH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_XANH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_XANH
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_XANH
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_XANH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_CAUTHANG_DO
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THA_COT_DO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAUTHANG_DO
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEO_COT_DO
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DON_XICHDU_DO
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO_Timeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAN_XICHDU_DO
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XICH_DU_DO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOAY_BAPBENH_DO
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_BB_DO
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bap_benh_auto
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Truot_ngang
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_ngang
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_truc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao_While
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra_While
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Vao
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Truot_Ra
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc_While
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc_While
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ha_Truc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nang_Truc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_PS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_PT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_TS
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_TT
</UL>

<P><STRONG><a name="[147]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
</UL>

<P><STRONG><a name="[14f]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[111]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[151]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>RCC_LSEConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[161]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Init_HW
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_gamepad_PS2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_in_mode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_out_mode
</UL>

<P><STRONG><a name="[165]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time7
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
</UL>

<P><STRONG><a name="[7c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
</UL>

<P><STRONG><a name="[110]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[167]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[114]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[169]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>ADC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[8c]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[172]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>ADC_CommonInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[173]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[174]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>ADC_VBATCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[91]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[179]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[8e]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[180]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>ADC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>ADC_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[191]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_ADC1_DMA
</UL>

<P><STRONG><a name="[192]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>DMA_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>DMA_ITConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>DMA_GetITStatus</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[76]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time7
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
</UL>

<P><STRONG><a name="[1a0]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time7
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
</UL>

<P><STRONG><a name="[1a3]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_ngang
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_doc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_encoder
</UL>

<P><STRONG><a name="[1a4]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time7
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
</UL>

<P><STRONG><a name="[7e]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
</UL>

<P><STRONG><a name="[7f]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
</UL>

<P><STRONG><a name="[80]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
</UL>

<P><STRONG><a name="[81]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
</UL>

<P><STRONG><a name="[1aa]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>TIM_SelectOCxM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[11c]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[11b]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[119]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[86]"></a>TIM_ICInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
</UL>

<P><STRONG><a name="[1c9]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1ca]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_pwm_time_t1
</UL>

<P><STRONG><a name="[1d0]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
</UL>

<P><STRONG><a name="[1d2]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_int_time6
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[11e]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[120]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[122]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[121]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[123]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1da]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_encoder_timer2_timer3
</UL>

<P><STRONG><a name="[1dd]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>USART_DeInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[95]"></a>USART_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
</UL>

<P><STRONG><a name="[1df]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
</UL>

<P><STRONG><a name="[1e2]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vputchar1
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vputchar
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>

<P><STRONG><a name="[1e5]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
</UL>

<P><STRONG><a name="[9a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vputchar1
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vputchar
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_uart1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>

<P><STRONG><a name="[63]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1f3]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun_clockwise111
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giaToc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun_clockwise111
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giaToc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun_clockwise111
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giaToc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun_clockwise111
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giaToc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotAnalytics
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;giaToc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotLineRun
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotRotate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotCurve
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robotDirectionAnalytics
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxF4
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[126]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[132]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
</UL>

<P><STRONG><a name="[1f6]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[12c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[128]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1f8]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1f9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[12f]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fa]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[6c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt_32
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_printInt
</UL>

<P><STRONG><a name="[136]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[131]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[133]"></a>__mathlib_rredf2</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1fb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1fc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1fd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[135]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[b7]"></a>cosf</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
</UL>

<P><STRONG><a name="[b6]"></a>sinf</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateMotor
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[109]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Home
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Data_Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_line_write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Clear
</UL>

<P><STRONG><a name="[10e]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11a]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[118]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[130]"></a>_printf_core</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[5f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
